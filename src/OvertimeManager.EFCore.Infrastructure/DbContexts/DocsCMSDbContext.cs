// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DocsCMS.Core.DbModels;
using Microsoft.Extensions.Configuration;
using System.IO;

namespace DocsCMS.EFCore.Infrastructure.DbContexts
{
    public partial class DocsCMSDbContext : DbContext
    {
        private string _dbConnStringName { get; set; } = "DocsCMSDbContext";

        public DocsCMSDbContext()
        {
            //_dbConnStringName = base.
        }

        public DocsCMSDbContext(DbContextOptions<DocsCMSDbContext> options)
            : base(options)
        {
        }

        // used to mimic EF6 constructor passing in dbConnStringName from config-file
        public DocsCMSDbContext(string dbConnStringName)
        {
            _dbConnStringName = dbConnStringName;


            
            
        }

        // https://docs.microsoft.com/en-us/ef/core/miscellaneous/connection-strings
        // https://stackoverflow.com/questions/38338475/no-database-provider-has-been-configured-for-this-dbcontext-on-signinmanager-p
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {

            // dev-test 
            //string tempString = $"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production"}.json";


            // if (!string.IsNullOrEmpty(_dbConnStringName) && !optionsBuilder.IsConfigured)
            // if (string.IsNullOrEmpty(_dbConnStringName) && !optionsBuilder.IsConfigured)
            if (!string.IsNullOrEmpty(_dbConnStringName))
            {
                // google search:
                // https://www.google.com/search?q=how+to+use+Microsoft.Extensions.Configuration
                // https://swimburger.net/blog/dotnet/using-configurationproviders-from-microsoft-extensions-configuration-on-dotnet-framework
                var configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)

                    // https://stackoverflow.com/questions/65564889/established-dependency-injection-in-net-core-console-application-for-ef-core-db
                    //.AddJsonFile($"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production"}.json", optional: true)
                    //.AddEnvironmentVariables()

                    // https://stackoverflow.com/questions/42268265/how-to-get-manage-user-secrets-in-a-net-core-console-application
                    .AddUserSecrets<ConnectionStrings>()

                    .Build();

                //
                string dbConnStringTest = configuration.GetConnectionString(_dbConnStringName);

                //
                //DbContextOptionsBuilder options = new DbContextOptionsBuilder();

                // set connection string from configuration  
                // 
                optionsBuilder.UseSqlServer(configuration.GetConnectionString(_dbConnStringName));

                // 
                base.OnConfiguring(optionsBuilder);

            }
        }

        public virtual DbSet<DocsCMS_CategoryTypes> DocsCMS_CategoryTypes { get; set; }
        public virtual DbSet<DocsCMS_CodeSnippets> DocsCMS_CodeSnippets { get; set; }
        public virtual DbSet<DocsCMS_ContentSections> DocsCMS_ContentSections { get; set; }
        public virtual DbSet<DocsCMS_Docs> DocsCMS_Docs { get; set; }
        public virtual DbSet<DocsCMS_DocsCategories> DocsCMS_DocsCategories { get; set; }
        public virtual DbSet<DocsCMS_Images> DocsCMS_Images { get; set; }
        public virtual DbSet<DocsCMS_OverviewGoals> DocsCMS_OverviewGoals { get; set; }
        public virtual DbSet<DocsCMS_Prerequisites> DocsCMS_Prerequisites { get; set; }
        public virtual DbSet<DocsCMS_References> DocsCMS_References { get; set; }
        public virtual DbSet<DocsCMS_Series> DocsCMS_Series { get; set; }
        public virtual DbSet<DocsCMS_SeriesDocs> DocsCMS_SeriesDocs { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DocsCMS_CategoryTypes>(entity =>
            {
                entity.HasKey(e => e.CategoryTypeKeyId)
                    .HasName("PK_dbo.DocsCMS_CategoryTypes");

                entity.Property(e => e.CategoryTypeKeyId).ValueGeneratedNever();

                entity.Property(e => e.CategoryName).IsUnicode(false);
            });

            modelBuilder.Entity<DocsCMS_CodeSnippets>(entity =>
            {
                entity.HasKey(e => e.CodeSnippetKeyId)
                    .HasName("PK_dbo.DocsCMS_CodeSnippets");

                entity.HasIndex(e => e.ContentSectionKeyId)
                    .HasName("IX_ContentSectionKeyId");

                entity.Property(e => e.CodeSnippetKeyId).ValueGeneratedNever();

                entity.Property(e => e.SnippetCaption).IsUnicode(false);

                entity.Property(e => e.SnippetText).IsUnicode(false);

                //entity.HasOne(d => d.ContentSectionKey)
                //    .WithMany(p => p.DocsCMS_CodeSnippets)
                //    .HasForeignKey(d => d.ContentSectionKeyId)
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("FK_dbo.DocsCMS_CodeSnippets_dbo.DocsCMS_ContentSections_ContentSectionKeyId");
            });

            modelBuilder.Entity<DocsCMS_ContentSections>(entity =>
            {
                entity.HasKey(e => e.ContentSectionKeyId)
                    .HasName("PK_dbo.DocsCMS_ContentSections");

                entity.HasIndex(e => e.DocKeyId)
                    .HasName("IX_DocKeyId");

                entity.Property(e => e.ContentSectionKeyId).ValueGeneratedNever();

                entity.Property(e => e.ContentHeading).IsUnicode(false);

                entity.Property(e => e.ContentText).IsUnicode(false);

                //entity.HasOne(d => d.DocKey)
                //    .WithMany(p => p.DocsCMS_ContentSections)
                //    .HasForeignKey(d => d.DocKeyId)
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("FK_dbo.DocsCMS_ContentSections_dbo.DocsCMS_Docs_DocKeyId");
            });

            // *** DocsCMS_CodeSnippets ***
            modelBuilder.Entity<DocsCMS_CodeSnippets>()
                .HasOne<DocsCMS_ContentSections>(d => d.DocsCMS_ContentSections)
                .WithMany(m => m.DocsCMS_CodeSnippets)
                .HasForeignKey(f => f.ContentSectionKeyId);

            // *** DocsCMS_Images ***
            modelBuilder.Entity<DocsCMS_Images>()
                .HasOne<DocsCMS_ContentSections>(d => d.DocsCMS_ContentSections)
                .WithMany(m => m.DocsCMS_Images)
                .HasForeignKey(f => f.ContentSectionKeyId);




            modelBuilder.Entity<DocsCMS_Docs>(entity =>
            {
                entity.HasKey(e => e.DocKeyId)
                    .HasName("PK_dbo.DocsCMS_Docs");

                entity.Property(e => e.DocKeyId).ValueGeneratedNever();

                entity.Property(e => e.Title).IsUnicode(false);

                entity.Property(e => e.TitleUrl).IsUnicode(false);
            });

            // ******************************* one-to-many config **********************************
            // thank-you!!!:
            // https://www.entityframeworktutorial.net/efcore/configure-one-to-many-relationship-using-fluent-api-in-ef-core.aspx

            // *** DocsCMS_ContentSections ***
            modelBuilder.Entity<DocsCMS_ContentSections>()
                .HasOne<DocsCMS_Docs>(d => d.DocsCMS_Docs)
                .WithMany(m => m.DocsCMS_ContentSections)
                .HasForeignKey(f => f.DocKeyId);

            // *** DocsCMS_OverviewGoals ***
            modelBuilder.Entity<DocsCMS_OverviewGoals>()
                .HasOne<DocsCMS_Docs>(d => d.DocsCMS_Docs)
                .WithMany(m => m.DocsCMS_OverviewGoals)
                .HasForeignKey(f => f.DocKeyId);

            // *** DocsCMS_Prerequisites ***
            modelBuilder.Entity<DocsCMS_Prerequisites>()
                .HasOne<DocsCMS_Docs>(d => d.DocsCMS_Docs)
                .WithMany(m => m.DocsCMS_Prerequisites)
                .HasForeignKey(f => f.DocKeyId);

            // *** DocsCMS_References ***
            modelBuilder.Entity<DocsCMS_References>()
                .HasOne<DocsCMS_Docs>(d => d.DocsCMS_Docs)
                .WithMany(m => m.DocsCMS_References)
                .HasForeignKey(f => f.DocKeyId);

            // *************************************************************************************

            modelBuilder.Entity<DocsCMS_DocsCategories>(entity =>
            {
                entity.HasKey(e => new { e.CategoryTypeKeyId, e.DocKeyId })
                    .HasName("PK_dbo.DocsCMS_DocsCategories");
            });

            modelBuilder.Entity<DocsCMS_Images>(entity =>
            {
                entity.HasKey(e => e.ImageKeyId)
                    .HasName("PK_dbo.DocsCMS_Images");

                entity.HasIndex(e => e.ContentSectionKeyId)
                    .HasName("IX_ContentSectionKeyId");

                entity.Property(e => e.ImageKeyId).ValueGeneratedNever();

                entity.Property(e => e.ImageCaption).IsUnicode(false);

                entity.Property(e => e.ImageUrl).IsUnicode(false);

                //entity.HasOne(d => d.ContentSectionKey)
                //    .WithMany(p => p.DocsCMS_Images)
                //    .HasForeignKey(d => d.ContentSectionKeyId)
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("FK_dbo.DocsCMS_Images_dbo.DocsCMS_ContentSections_ContentSectionKeyId");
            });

            
            modelBuilder.Entity<DocsCMS_OverviewGoals>(entity =>
            {
                entity.HasKey(e => e.OverviewGoalKeyId)
                    .HasName("PK_dbo.DocsCMS_OverviewGoals");

                entity.HasIndex(e => e.DocKeyId)
                    .HasName("IX_DocKeyId");

                entity.Property(e => e.OverviewGoalKeyId).ValueGeneratedNever();

                entity.Property(e => e.OverviewGoalContent).IsUnicode(false);

                entity.Property(e => e.ShortDesc).IsUnicode(false);

                
                //entity.HasOne(d => d.DocKey)
                //    .WithMany(p => p.DocsCMS_OverviewGoals)
                //    .HasForeignKey(d => d.DocKeyId)
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("FK_dbo.DocsCMS_OverviewGoals_dbo.DocsCMS_Docs_DocKeyId");
            });

            modelBuilder.Entity<DocsCMS_Prerequisites>(entity =>
            {
                entity.HasKey(e => e.PrerequisiteKeyId)
                    .HasName("PK_dbo.DocsCMS_Prerequisites");

                entity.HasIndex(e => e.DocKeyId)
                    .HasName("IX_DocKeyId");

                entity.Property(e => e.PrerequisiteKeyId).ValueGeneratedNever();

                entity.Property(e => e.PrerequisiteContent).IsUnicode(false);

                entity.Property(e => e.ShortDesc).IsUnicode(false);

                //entity.HasOne(d => d.DocKey)
                //    .WithMany(p => p.DocsCMS_Prerequisites)
                //    .HasForeignKey(d => d.DocKeyId)
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("FK_dbo.DocsCMS_Prerequisites_dbo.DocsCMS_Docs_DocKeyId");
            });

            modelBuilder.Entity<DocsCMS_References>(entity =>
            {
                entity.HasKey(e => e.ReferenceKeyId)
                    .HasName("PK_dbo.DocsCMS_References");

                entity.HasIndex(e => e.DocKeyId)
                    .HasName("IX_DocKeyId");

                entity.Property(e => e.ReferenceKeyId).ValueGeneratedNever();

                entity.Property(e => e.Caption).IsUnicode(false);

                entity.Property(e => e.Url).IsUnicode(false);

                //entity.HasOne(d => d.DocKey)
                //    .WithMany(p => p.DocsCMS_References)
                //    .HasForeignKey(d => d.DocKeyId)
                //    .OnDelete(DeleteBehavior.ClientSetNull)
                //    .HasConstraintName("FK_dbo.DocsCMS_References_dbo.DocsCMS_Docs_DocKeyId");
            });

            modelBuilder.Entity<DocsCMS_Series>(entity =>
            {
                entity.HasKey(e => e.SeriesKeyId)
                    .HasName("PK_dbo.DocsCMS_Series");

                entity.Property(e => e.SeriesKeyId).ValueGeneratedNever();

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<DocsCMS_SeriesDocs>(entity =>
            {
                entity.HasKey(e => new { e.SeriesKeyId, e.DocKeyId })
                    .HasName("PK_dbo.DocsCMS_SeriesDocs");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}